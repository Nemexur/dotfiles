#!/usr/bin/env bash
#
# Helper script to quickly setup project in Python.

setupPython() {
    ask_user " - Which python version to use:"
    read -e -r python_version
    # Setup PyEnv
    pyenv install -s $python_version
    pyenv local $python_version
}

addPipConfIfNeeded() {
    ask_user " - Add custom pip.conf (y/n)?"
    read -n 1 -r action
    echo ""
    if [[ $action =~ ^[Yy]$ ]]; then
        ask_user " - pip.conf title in dotfiles private:"
        read -e -r custom_pip_conf
        cp $HOME/.dotfiles/private/pip_confs/$custom_pip_conf .venv/pip.conf
    elif [[ $action =~ ^[Nn]$ ]]; then
        info "You chose not to add custom pip.conf for Python Virtual Env."
    else
        fail "Invalid user input."
    fi
}

setupPythonVenv() {
    # Create Python Virtual Env
    python -m venv .venv
}

setupPoetry() {
    info "Setup Poetry."
    # Clear cache in advance without interaction
    poetry cache clear --all -n .
    # Poetry Venv inside project
    poetry config --local virtualenvs.in-project true
    # Init Poetry without interaction with selected python version
    poetry init -n --python ">=$(cat .python-version),<3.10"
    # Add venv beforehand
    poetry show -v
    # Check if pyproject.toml is ok
    ask_user " - Edit pyproject.toml (y/n)?"
    read -n 1 -r action
    if [[ $action =~ ^[Yy]$ ]]; then
        e pyproject.toml
    elif [[ $action =~ ^[Nn]$ ]]; then
        info "You chose not to edit pyproject.toml."
    else
        fail "Invalid user input."
    fi
    info "Enter python project packages (to \e[95mPoetry\e[m)."
    while read -p "Package name (leave blank to finish): " -r package
    do
        # break if the line is empty
        [ -z "$package" ] && break
        poetry add $package
        echo ""
    done
}


setupPipenv() {
    info "Setup Pipenv."
    # Add pipenv in project
    pipenv install
    # Check if pyproject.toml is ok
    ask_user " - Edit Pipfile (y/n)?"
    read -n 1 -r action
    if [[ $action =~ ^[Yy]$ ]]; then
        e Pipfile
    elif [[ $action =~ ^[Nn]$ ]]; then
        info "You chose not to edit Pipfile."
    else
        fail "Invalid user input."
    fi
    info "Enter python project packages (to \e[95mPipenv\e[m)."
    while read -p "Package name (leave blank to finish): " -r package
    do
        # break if the line is empty
        [ -z "$package" ] && break
        pipenv install $package
        echo ""
    done
}


setupRequirements() {
    info "Setup Python requirements."
    # Activate venv
    source .venv/bin/activate
    # Adding requiretments for python project and saving it to txt
    if [ -f requirements.txt ] ; then
        info "requirements.txt already exists."
        ask_user " - Create new requirements (y/n)?"
        read -n 1 -r action
        echo ""
        if [[ $action =~ ^[Yy]$ ]]; then
            rm -rf requirements.txt
            touch requirements.txt
        elif [[ $action =~ ^[Nn]$ ]]; then
            installRequirements
            return
        else
            fail "Invalid user input."
        fi
    else
        rm -rf requirements.txt
        touch requirements.txt
    fi
    info "Enter python project packages (to \e[95mRequirements\e[m)."
    while read -p "Package name (leave blank to finish): " -r package
    do
        # break if the line is empty
        [ -z "$package" ] && break
        echo "$package" >> "requirements.txt"
    done
    installRequirements
}


installRequirements() {
    # Load them
    pip install -r requirements.txt
    success "Successfully installed Python requirements."
}


selectDependencyManagement() {
    local reqs= poetry= pipenv=
    ask_user " - Select type of Dependency Management to use?\n\
    [\033[00;32m0\033[0m] Requirements\n\
    [\033[00;32m1\033[0m] Poetry\n\
    [\033[00;32m2\033[0m] Pipenv\n\
    >"
    read -n 1 -r action
    echo ""
    case $action in
        0 )
            setupPythonVenv
            addPipConfIfNeeded
            setupRequirements
            ;;
        1 )
            setupPoetry
            ;;
        2 )
            setupPythonVenv
            setupPipenv
            ;;
        * )
            fail "Invalid user input."
            ;;
    esac
}


setupJupyter() {
    if [ -f pyproject.toml ]; then
        local install_func="poetry add --dev"
    elif [ -f Pipfile ]; then
        local install_func="pipenv install --dev"
    else
        local install_func="pip install"
    fi
    ask_user " - Do you want to setup Jupyter and IPython for your project (y/n)?"
    read -n 1 -r action
    echo ""
    if [[ $action =~ ^[Yy]$ ]]; then
        source .venv/bin/activate
        $install_func ipython jupyterlab ipykernel
        python -m ipykernel install --user --name $(echo "${PWD##*/}")-venv
        success "Successfully configured Jupyter and IPython."
    elif [[ $action =~ ^[Nn]$ ]]; then
        info "You chose not to setup Jupyter and IPython."
    else
        fail "Invalid user input."
    fi
}


setupVSCodeSettings() {
    mkdir -p .vscode
    ask_user " - Do you want to use default VSCode settings.json (y/n)?"
    read -n 1 -r action
    echo ""
    if [[ $action =~ ^[Yy]$ ]]; then
        cp $HOME/.dotfiles/vscode/python/settings.json .vscode/settings.json
        # Install flake8 for linting
        source .venv/bin/activate
        success "Successfully configured default VSCode settings.json."
    elif [[ $action =~ ^[Nn]$ ]]; then
        info "You chose to setup custom VSCode settings.json."
        touch .vscode/settings.json
    else
        fail "Invalid user input."
    fi
}


setupPython
selectDependencyManagement
setupJupyter
setupVSCodeSettings
