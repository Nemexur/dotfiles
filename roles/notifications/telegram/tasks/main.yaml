---
- name: Prompt telegram token
  ansible.builtin.pause:
    prompt: "Input your telegram token:"
  register: _telegram_token
  when:
    - telegram_token is undefined
    - telegram_token_local is undefined

- name: Prompt telegram chat id
  ansible.builtin.pause:
    prompt: "Input your telegram chat id:"
  register: _telegram_chat_id
  when:
    - telegram_chat_id is undefined
    - telegram_chat_id_local is undefined

- name: Set facts based on the input
  ansible.builtin.set_fact:
    telegram_token_local: >-
      {% if telegram_token is defined %}{{ telegram_token }}
      {%- elif _telegram_token.user_input is defined and _telegram_token.user_input|length > 0 -%}
      {{ _telegram_token.user_input }}
      {%- else %}none{% endif -%}
    telegram_chat_id_local: >-
      {% if telegram_chat_id is defined %}{{ telegram_chat_id }}
      {%- elif _telegram_chat_id.user_input is defined and _telegram_chat_id.user_input|length > 0 -%}
      {{ _telegram_chat_id.user_input }}
      {%- else %}none{% endif -%}
  when:
    - telegram_token_local is undefined
    - telegram_chat_id_local is undefined

- name: Validate prompts
  ansible.builtin.assert:
    that:
      - "telegram_token_local != 'none'"
      - "telegram_chat_id_local != 'none'"
    fail_msg: "telegram token and chat id can not be empty"
    success_msg: "looks good!!"

- name: Send notification to Telegram
  community.general.telegram:
    token: "{{ telegram_token_local }}"
    api_method: SendMessage
    api_args:
      chat_id: "{{ telegram_chat_id_local }}"
      text: "{{ telegram_message }}"
      parse_mode: markdown
      disable_notification: false
      disable_web_page_preview: true
